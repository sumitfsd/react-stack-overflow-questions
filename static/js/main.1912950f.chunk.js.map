{"version":3,"sources":["components/Header.tsx","utility.ts","config.ts","service.ts","components/questions/card/Card.tsx","components/questions/popup/Popup.tsx","components/questions/list/List.tsx","App.tsx","index.tsx"],"names":["Header","getRequest","url","data","a","axios","get","params","response","error_message","message","TIME_FORMAT","getQuestionsRequest","Card","props","className","onClick","openPopup","dangerouslySetInnerHTML","__html","question","title","author","moment","unix","created","format","Popup","closePopup","href","link","target","rel","List","React","useState","items","setItems","isFetching","setIsFetching","page","setPage","isOpen","setIsOpen","openQuestion","setOpenQuestion","scrollContainer","useRef","getQuestions","pageNumber","site","q","pageSize","res","prevState","prevPage","console","log","handleScroll","current","document","documentElement","scrollTop","clientHeight","scrollHeight","useEffect","window","addEventListener","result","ref","length","map","owner","display_name","creation_date","question_id","App","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.1912950f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <h1>Stack Overflow questions</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nexport const getRequest = async (url: string, data: object) => {\r\n  try {\r\n    return await axios.get(url, {\r\n      params: data\r\n    });\r\n  } catch (err) {\r\n    if (err.response && err.response.data) {\r\n      if (err.response.data.error_message) {\r\n        return { message: err.response.data.error_message };\r\n      }\r\n    }\r\n    return err;\r\n  }\r\n};\r\n","export const API_URL: string = \"https://api.stackexchange.com/search/advanced\";\r\nexport const TIME_FORMAT: string = \"YYYY-MM-DD hh:mm A\";\r\n","import { getRequest } from \"./utility\";\r\nimport { API_URL } from \"./config\";\r\n\r\nexport const getQuestionsRequest = async (data: object) => {\r\n  return await getRequest(API_URL, data);\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { TIME_FORMAT } from \"../../../config\";\r\nimport { QuestionProps } from \"../QuestionProps\";\r\nimport \"./Card.css\";\r\n\r\nconst Card: React.FC<QuestionProps> = (props) => (\r\n  <div className=\"card\" onClick={() => props.openPopup(props)}>\r\n    <div className=\"content\">\r\n      <h4>\r\n        {/* Use dangerouslySetInnerHTML becasue getting HTML tags in title */}\r\n        <b dangerouslySetInnerHTML={{ __html: props.question.title }}></b>\r\n      </h4>\r\n      <p>Author: {props.question.author}</p>\r\n      <p>Created: {moment.unix(props.question.created).format(TIME_FORMAT)}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { TIME_FORMAT } from \"../../../config\";\r\nimport moment from \"moment\";\r\nimport { PopupProps } from \"../QuestionProps\";\r\nimport \"./Popup.css\";\r\n\r\nconst Popup: React.FC<PopupProps> = (props) => (\r\n  <div className=\"modal\">\r\n    <div className=\"modal_content\">\r\n      <span className=\"close\" onClick={props.closePopup}>\r\n        <b>&times;</b>\r\n      </span>\r\n      <div className=\"content\">\r\n        <h4>\r\n          {/* Use dangerouslySetInnerHTML becasue getting HTML tags in title */}\r\n          <b dangerouslySetInnerHTML={{ __html: props.question.title }}></b>\r\n        </h4>\r\n        <p>Author: {props.question.author}</p>\r\n        <p>\r\n          Created: {moment.unix(props.question.created).format(TIME_FORMAT)}\r\n        </p>\r\n        <a href={props.question.link} target=\"_blank\" rel=\"noreferrer\">\r\n          Link\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\nimport { getQuestionsRequest } from \"../../../service\";\r\nimport { ListProps, QuestionProps } from \"../QuestionProps\";\r\nimport QuestionCard from \"../card/Card\";\r\nimport QuestionPopup from \"../popup/Popup\";\r\nimport \"./List.css\";\r\n\r\nconst List = () => {\r\n  const [items, setItems] = React.useState<ListProps[]>([]);\r\n  const [isFetching, setIsFetching] = React.useState(false);\r\n  const [page, setPage] = React.useState<number>(1);\r\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\r\n  const [openQuestion, setOpenQuestion] = React.useState<QuestionProps>();\r\n  const scrollContainer = React.useRef(null);\r\n\r\n  const getQuestions = async (pageNumber: number) => {\r\n    const params: object = {\r\n      site: \"stackoverflow.com\",\r\n      q: \"react.js\",\r\n      pageSize: 10,\r\n      page: pageNumber\r\n    };\r\n    const res = await getQuestionsRequest(params);\r\n    if (res.data && res.data.items) {\r\n      setItems((prevState: ListProps[]) => [...prevState, ...res.data.items]);\r\n      setPage((prevPage) => prevPage + 1);\r\n    } else {\r\n      console.log(\"error\", res.message);\r\n    }\r\n    setIsFetching(false);\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    if (scrollContainer.current) {\r\n      if (\r\n        document.documentElement.scrollTop +\r\n          scrollContainer.current.clientHeight +\r\n          400 <=\r\n          scrollContainer.current.scrollHeight ||\r\n        isFetching\r\n      ) {\r\n        return;\r\n      }\r\n      setIsFetching(true);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getQuestions(page);\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  const getMoreQuestions = (pageNumber: number) => {\r\n    getQuestions(pageNumber);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (!isFetching) return;\r\n    getMoreQuestions(page);\r\n  }, [isFetching]);\r\n\r\n  const openPopup = (result: QuestionProps) => {\r\n    setIsOpen(true);\r\n    setOpenQuestion(result);\r\n  };\r\n\r\n  const closePopup = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isOpen && openQuestion && (\r\n        <QuestionPopup\r\n          question={openQuestion.question}\r\n          closePopup={closePopup}\r\n        />\r\n      )}\r\n\r\n      <div className=\"container\" ref={scrollContainer}>\r\n        {items.length ? (\r\n          items.map((question: ListProps) => (\r\n            <QuestionCard\r\n              key={question.question_id}\r\n              question={{\r\n                title: question.title,\r\n                author: question.owner.display_name,\r\n                created: question.creation_date,\r\n                link: question.link\r\n              }}\r\n              openPopup={openPopup}\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>Loading...</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default List;\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport Header from \"./components/Header\";\nimport QuestionsList from \"./components/questions/list/List\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <QuestionsList />\n  </div>\n);\n\nexport default App;\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}